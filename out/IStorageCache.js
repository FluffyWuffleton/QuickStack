define(["require", "exports", "game/doodad/Doodad", "utilities/game/TileHelpers", "utilities/game/TilePosition", "utilities/math/Direction", "utilities/math/Vector3", "./StaticHelper", "./TransferHandler"], function (require, exports, Doodad_1, TileHelpers_1, TilePosition_1, Direction_1, Vector3_1, StaticHelper_1, TransferHandler_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StorageCacheDoodad = exports.StorageCacheTile = exports.StorageCachePlayer = exports.StorageCacheItem = exports.StorageCache = exports.LocalStorageCache = exports.locationGroup = void 0;
    var locationGroup;
    (function (locationGroup) {
        locationGroup[locationGroup["self"] = 0] = "self";
        locationGroup[locationGroup["nearby"] = 1] = "nearby";
    })(locationGroup = exports.locationGroup || (exports.locationGroup = {}));
    ;
    class LocalStorageCache {
        constructor() {
            this._nearbyUnrolled = new Set;
            this._outdated = { player: true, nearby: true };
        }
        get nearby() { return this._nearby; }
        set nearby(value) { this._nearby = value; }
        setOutdated(K) { this._outdated[K] = true; }
        update() {
            if (this._outdated.player) {
                this._interrelations = {};
                this.player.refresh();
                this.player.updateUnrolled();
            }
            if (this._outdated.nearby) {
                this._interrelations = {};
                this._nearby.map((n, i) => n.refresh() ? undefined : i).filterNullish().reverse().forEach(removeIdx => {
                    this._nearby.splice(removeIdx, 1);
                });
                const hashes = this._nearby.map(n => n.cHash);
                const itemMgr = this.player.entity.island.items;
                (0, TransferHandler_1.validNearby)(this.player.entity, true).forEach(adj => {
                    const adjHash = itemMgr.hashContainer(adj);
                    if (!hashes.includes(adjHash)) {
                        if (Doodad_1.default.is(adj))
                            this._nearby.push(new StorageCacheDoodad(adj, itemMgr));
                        else if (itemMgr.isTileContainer(adj) && "data" in adj)
                            this._nearby.push(new StorageCacheTile(adj, itemMgr));
                        else if (StaticHelper_1.GLOBALCONFIG.log_info)
                            StaticHelper_1.default.QS_LOG.warn(`LocalStorageCache::update("nearby")\nUnhandled adjacent container: ${adj}`);
                    }
                });
                this.unrollNearby();
            }
        }
        get nearbyUnrolled() { return this._nearbyUnrolled; }
        unrollNearby() {
            this._nearby.forEach(n => n.updateUnrolled());
            this._nearbyUnrolled.clear();
            this._nearby.forEach(n => this._nearbyUnrolled.addFrom(n.unrolled));
        }
        locationGroupHashes(g) {
            switch (g) {
                case locationGroup.nearby: return this._nearby.map(n => n.cHash);
                case locationGroup.self: return [this.player.cHash, ...this.player.deepSubs().map(s => s.cHash)];
            }
        }
        flipHash(A, B) { return A > B; }
        ABHash(A, B) { return this.flipHash(A, B) ? `${B}${A}` : `${A}${B}`; }
        updateRelation(A, B, filter) {
            if (A === B)
                return true;
            if (typeof A !== "string") {
                return !this.locationGroupHashes(A).map(hash => this.updateRelation(hash, B, filter)).some(ret => !ret);
            }
            if (typeof B !== "string") {
                return !this.locationGroupHashes(B).map(hash => this.updateRelation(A, hash, filter)).some(ret => !ret);
            }
            if (A < B) {
                [A, B] = [B, A];
            }
            const ABHash = `${A}${B}`;
            const checkedParams = new Set();
            if (this._interrelations[ABHash] !== undefined) {
                checkedParams.addFrom(this._interrelations[ABHash].checked);
                if (filter !== undefined && filter.length > 0) {
                    filter = [...TransferHandler_1.default.groupifyParameters(filter.map(p => typeof p === "string" ? { group: p } : { type: p }))];
                    filter = filter.filter(p => !checkedParams.has(p));
                    if (filter.length === 0)
                        return true;
                }
            }
            else
                this._interrelations[ABHash] = { checked: [], found: [] };
            const fullCacheTreeFlat = [this.player, ...this.player.deepSubs(), ...this.nearby.flatMap(n => [n, ...n.deepSubs()])];
            const ARef = fullCacheTreeFlat.find(cache => cache.cHash === A);
            const BRef = fullCacheTreeFlat.find(cache => cache.cHash === B);
            if (ARef === undefined || BRef === undefined)
                return false;
            const matches = new Set([...ARef.main].map(p => p.group ?? p.type));
            if (filter !== undefined && filter.length > 0)
                matches.retainWhere(m => !filter.includes(m));
            this._interrelations[ABHash].checked.push(...matches);
            const BParams = [...BRef.main].map(p => p.group ?? p.type);
            matches.retainWhere(m => BParams.includes(m));
            if (matches.size < 1)
                return true;
            const infA = StorageCache.is(ARef);
            const infB = StorageCache.is(BRef);
            matches.forEach(m => {
                const fitAB = infB ? true : TransferHandler_1.default.canFitAny([ARef.cRef], [BRef.cRef], this.player.entity, typeof (m) === "string" ? [{ group: m }] : [{ type: m }]);
                const fitBA = infA ? true : TransferHandler_1.default.canFitAny([BRef.cRef], [ARef.cRef], this.player.entity, typeof (m) === "string" ? [{ group: m }] : [{ type: m }]);
                this._interrelations[ABHash].found.push([m, fitAB, fitBA]);
            });
            return true;
        }
        checkSelfNearby(filter, reverse) {
            this.update();
            this.updateRelation(locationGroup.self, locationGroup.nearby, filter);
            for (const s of [this.player, ...this.player.deepSubs()])
                for (const n of this.nearby) {
                    if (StorageCache.is(n) && StaticHelper_1.default.QS_INSTANCE.globalData.optionForbidTiles && !reverse)
                        continue;
                    if (this._interrelations[this.ABHash(s.cHash, n.cHash)].found
                        .filter(fnd => filter === undefined || filter.length > 0 || filter.includes(fnd[0]))
                        .some(fnd => fnd[(this.flipHash(s.cHash, n.cHash) ? !reverse : reverse) ? 1 : 2]))
                        return true;
                }
            return false;
        }
        checkSpecificNearby(AHash, filter, reverse) {
            this.update();
            if (this.updateRelation(AHash, locationGroup.nearby, filter) === false)
                return undefined;
            for (const n of this._nearby) {
                if (StorageCache.is(n) && StaticHelper_1.default.QS_INSTANCE.globalData.optionForbidTiles && !reverse)
                    continue;
                if (n.cHash === AHash)
                    continue;
                if (this._interrelations[this.ABHash(AHash, n.cHash)].found
                    .filter(fnd => filter === undefined || filter.length > 0 || filter.includes(fnd[0]))
                    .some(fnd => fnd[(this.flipHash(AHash, n.cHash) ? !reverse : reverse) ? 2 : 1]))
                    return true;
            }
            return false;
        }
        checkSelfSpecific(BHash, filter, reverse) {
            this.update();
            if (this.updateRelation(BHash, locationGroup.nearby, filter) === false)
                return undefined;
            for (const s of [this.player, ...this.player.deepSubs()]) {
                if (s.cHash === BHash)
                    continue;
                if (this._interrelations[this.ABHash(s.cHash, BHash)].found
                    .filter(fnd => filter === undefined || filter.length > 0 || filter.includes(fnd[0]))
                    .some(fnd => fnd[(this.flipHash(s.cHash, BHash) ? !reverse : reverse) ? 2 : 1]))
                    return true;
            }
            return false;
        }
        checkSpecific(fromHash, toHash, filter) {
            this.update();
            if (fromHash === toHash)
                return false;
            if (this.updateRelation(fromHash, toHash, filter) === false)
                return undefined;
            if (this._interrelations[this.ABHash(fromHash, toHash)].found
                .filter(fnd => filter === undefined || filter.length > 0 || filter.includes(fnd[0]))
                .some(fnd => fnd[this.flipHash(fromHash, toHash) ? 2 : 1]))
                return true;
            return false;
        }
    }
    exports.LocalStorageCache = LocalStorageCache;
    ;
    class StorageCache {
        constructor(e, hash) {
            this.entity = e;
            this.cHash = hash;
            this._unrolled = new Set;
            this.refresh();
        }
        get main() { return this._main; }
        get subs() { return this._subs; }
        get unrolled() { return this._unrolled; }
        deepSubs() {
            const ret = [...this._subs];
            this._subs.forEach(s => ret.push(...s.deepSubs()));
            return ret;
        }
        updateUnrolled() {
            this._subs.forEach(s => s.updateUnrolled());
            this._unrolled.clear();
            this._unrolled.addFrom(this._main);
            this._subs.forEach(s => this._unrolled.addFrom(s.unrolled));
        }
        findSub(i) {
            for (const s of this._subs) {
                if (s.entity === i)
                    return s;
                const ss = s.findSub(i);
                if (ss)
                    return ss;
            }
            return undefined;
        }
        refreshFromArray(contents, protect) {
            this._main = TransferHandler_1.default.setOfParams([{
                    containedItems: (protect ?? false)
                        ? contents.filter(i => !(i.isProtected || i.isEquipped(true) || (StaticHelper_1.default.QS_INSTANCE.globalData.optionKeepContainers && (0, TransferHandler_1.isStorageType)(i.type))))
                        : contents
                }]);
            this._subs = contents
                .filter(i => i.island.items.isContainer(i))
                .map(ii => new StorageCacheItem(ii));
        }
    }
    exports.StorageCache = StorageCache;
    (function (StorageCache) {
        function is(val) {
            return val instanceof (StorageCache);
        }
        StorageCache.is = is;
    })(StorageCache = exports.StorageCache || (exports.StorageCache = {}));
    class StorageCacheNearby extends StorageCache {
        get relation() { return this._relation; }
        refreshRelationFromPos(thisPos) {
            const ppos = this.nearWhom.getPoint();
            const diff = { x: thisPos.x - ppos.x, y: thisPos.y - ppos.y, z: thisPos.z - ppos.z };
            if (!TileHelpers_1.default.isAdjacent(ppos, thisPos) && !Object.values(diff).every(d => d === 0))
                return false;
            this._relation = Direction_1.Direction.get(diff);
            return true;
        }
        refresh() {
            if (this.refreshRelation()) {
                this.refreshFromArray(this.entity.containedItems ?? []);
                return true;
            }
            return false;
        }
    }
    class StorageCacheItem extends StorageCache {
        constructor(e) {
            super(e, e.island.items.hashContainer(e));
            this.cRef = this.entity;
        }
        refresh() { this.refreshFromArray(this.entity.containedItems ?? []); }
    }
    exports.StorageCacheItem = StorageCacheItem;
    class StorageCachePlayer extends StorageCache {
        constructor(e) {
            super(e, e.island.items.hashContainer(e.inventory));
            this.cRef = this.entity.inventory;
        }
        refresh() { this.refreshFromArray(this.entity.inventory.containedItems, true); }
    }
    exports.StorageCachePlayer = StorageCachePlayer;
    class StorageCacheTile extends StorageCacheNearby {
        constructor(e, items) {
            super(e, items.hashContainer(e));
            this.cRef = items.getTileContainer(...(0, TilePosition_1.getTilePosition)(e.data), e);
        }
        refreshRelation() { return super.refreshRelationFromPos(new Vector3_1.default((0, TilePosition_1.getTilePosition)(this.entity.data))); }
    }
    exports.StorageCacheTile = StorageCacheTile;
    class StorageCacheDoodad extends StorageCacheNearby {
        constructor(e, items) {
            super(e, items.hashContainer(e));
            this.cRef = e;
        }
        refreshRelation() { return super.refreshRelationFromPos({ x: this.entity.x, y: this.entity.y, z: this.entity.z }); }
    }
    exports.StorageCacheDoodad = StorageCacheDoodad;
});
//# sourceMappingURL=data:application/json;base64,