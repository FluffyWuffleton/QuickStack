define(["require", "exports", "game/doodad/Doodad", "game/item/ItemManager", "utilities/math/Direction", "utilities/math/Vector3", "./StaticHelper", "./TransferHandler"], function (require, exports, Doodad_1, ItemManager_1, Direction_1, Vector3_1, StaticHelper_1, TransferHandler_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StorageCacheDoodad = exports.StorageCacheTile = exports.StorageCachePlayer = exports.StorageCacheItem = exports.StorageCacheBase = exports.LocalStorageCache = exports.isOnOrAdjacent = exports.locationGroup = void 0;
    ;
    var locationGroup;
    (function (locationGroup) {
        locationGroup[locationGroup["self"] = 0] = "self";
        locationGroup[locationGroup["nearby"] = 1] = "nearby";
    })(locationGroup = exports.locationGroup || (exports.locationGroup = {}));
    ;
    function isOnOrAdjacent(A, B) { return A.z === B.z && (Math.abs(A.x - B.x) + Math.abs(A.y - B.y)) <= 1; }
    exports.isOnOrAdjacent = isOnOrAdjacent;
    class LocalStorageCache {
        constructor(p) {
            this._nearby = [];
            this._nearbyOutdated = true;
            this._interrelations = {};
            this._player = new StorageCachePlayer(p);
        }
        get player() { return this._player.refresh(); }
        get nearby() { return this.refreshNearby()._nearby; }
        interrelation(A, B, filter) {
            return this.updateRelation(A, B, filter) ? this._interrelations[this.ABHash(A, B)] : undefined;
        }
        setOutdated(K) {
            const upd = !K ? ["player", "nearby"] : [K];
            if (upd.includes("player"))
                this.player.setOutdated(true);
            if (upd.includes("nearby")) {
                this._nearbyOutdated = true;
                this._nearby.forEach(n => n.setOutdated(true));
            }
            this._interrelations = {};
        }
        refreshNearby() {
            if (!this._nearbyOutdated)
                return this;
            const hashes = this._nearby.map(n => n.cHash);
            const itemMgr = this.player.entity.island.items;
            this._nearby.map((n, i) => n.refreshIfNear() ? undefined : i).filterNullish().reverse().forEach(removeIdx => {
                if (StaticHelper_1.GLOBALCONFIG.log_info)
                    StaticHelper_1.default.QS_LOG.info(`Removing cache for distant entity '${this._nearby[removeIdx].cHash}' at index ${removeIdx}.`);
                this.purgeRelations(this._nearby[removeIdx].cHash);
                this._nearby.splice(removeIdx, 1);
            });
            (0, TransferHandler_1.validNearby)(this.player.entity, true).forEach(adj => {
                const adjHash = itemMgr.hashContainer(adj);
                if (!hashes.includes(adjHash)) {
                    if (StaticHelper_1.GLOBALCONFIG.log_info)
                        StaticHelper_1.default.QS_LOG.info(`Appending new cache for nearby entity '${this.player.entity.island.items.hashContainer(adj)}'`);
                    if (Doodad_1.default.is(adj))
                        this._nearby.push(new StorageCacheDoodad(adj, this.player.entity));
                    else if (itemMgr.isTileContainer(adj) && "data" in adj)
                        this._nearby.push(new StorageCacheTile(adj, this.player.entity));
                    else if (StaticHelper_1.GLOBALCONFIG.log_info)
                        StaticHelper_1.default.QS_LOG.warn(`FAILED TO HANDLE ADJACENT CONTAINER: ${adj}'`);
                }
            });
            this._nearbyOutdated = false;
            return this;
        }
        locationGroupMembers(g) {
            switch (g) {
                case locationGroup.nearby: return this._nearby;
                case locationGroup.self: return [this.player, ...this.player.deepSubs()];
            }
        }
        flipHash(A, B) { return A > B; }
        ABHash(A, B) { return this.flipHash(A, B) ? `${B}::${A}` : `${A}::${B}`; }
        CheckedMatchCanTransfer(ABMatch, filter, reverse) {
            return ABMatch[reverse ? 2 : 1] && (!filter || !filter.length || filter.includes(ABMatch[0]));
        }
        purgeRelations(oldHash) {
            Object.keys(this._interrelations)
                .map(KEY => KEY.includes(oldHash) ? KEY : undefined).filterNullish()
                .forEach(KEY => delete (this._interrelations[KEY]));
        }
        updateRelation(A, B, filter) {
            if (A === B)
                return true;
            const flip = this.flipHash(A, B);
            const ABHash = this.ABHash(A, B);
            const checkedParams = new Set();
            if (this._interrelations[ABHash] !== undefined) {
                checkedParams.addFrom(this._interrelations[ABHash].checked);
                if (filter !== undefined && filter.length > 0) {
                    filter = [...TransferHandler_1.default.groupifyParameters(filter.map(p => typeof p === "string" ? { group: p } : { type: p }))];
                    filter = filter.filter(p => !checkedParams.has(p));
                    if (filter.length === 0)
                        return true;
                }
            }
            else
                this._interrelations[ABHash] = { checked: [], found: [] };
            const fullCacheTreeFlat = [this.player, ...this.player.deepSubs(), ...this.nearby.flatMap(n => [n, ...n.deepSubs()])];
            const Ref = [fullCacheTreeFlat.find(cache => cache.cHash === (flip ? B : A)), fullCacheTreeFlat.find(cache => cache.cHash === (flip ? A : B))];
            if (Ref[0] === undefined || Ref[1] === undefined)
                return false;
            const matches = new Set([...Ref[0].main].map(p => p.group ?? p.type));
            if (filter !== undefined && filter.length > 0)
                matches.retainWhere(m => filter.includes(m));
            matches.retainWhere(m => !this._interrelations[ABHash].checked.includes(m));
            this._interrelations[ABHash].checked.push(...matches);
            const BParams = [...Ref[1].main].map(p => p.group ?? p.type);
            matches.retainWhere(m => BParams.includes(m));
            if (matches.size < 1)
                return true;
            const infCapacity = Ref.map(r => r.iswhat === "Player");
            matches.forEach(m => {
                const fitAB = infCapacity[1] ? true : TransferHandler_1.default.canFitAny([Ref[0].cRef], [Ref[1].cRef], this.player.entity, typeof (m) === "string" ? [{ group: m }] : [{ type: m }]);
                const fitBA = infCapacity[0] ? true : TransferHandler_1.default.canFitAny([Ref[1].cRef], [Ref[0].cRef], this.player.entity, typeof (m) === "string" ? [{ group: m }] : [{ type: m }]);
                this._interrelations[ABHash].found.push([m, fitAB, fitBA]);
            });
            return true;
        }
        checkSelfNearby(filter, reverse) {
            for (const s of this.locationGroupMembers(locationGroup.self))
                for (const n of this.locationGroupMembers(locationGroup.self)) {
                    if (n.iswhat === "ITile" && StaticHelper_1.default.QS_INSTANCE.globalData.optionForbidTiles && !reverse)
                        continue;
                    const flip = this.flipHash(s.cHash, n.cHash) ? !reverse : !!reverse;
                    if (this.interrelation(s.cHash, n.cHash)?.found.some(checkedMatch => this.CheckedMatchCanTransfer(checkedMatch, filter, flip)))
                        return true;
                }
            return false;
        }
        checkSpecificNearby(AHash, filter, reverse) {
            if (![this.player, ...this._nearby].some(c => c.findSub(AHash)))
                return undefined;
            for (const n of this.nearby) {
                if (n.iswhat === "ITile" && StaticHelper_1.default.QS_INSTANCE.globalData.optionForbidTiles && !reverse)
                    continue;
                if (n.cHash === AHash)
                    continue;
                const flip = this.flipHash(AHash, n.cHash) ? !reverse : !!reverse;
                if (this.interrelation(AHash, n.cHash)?.found.some(checkedMatch => this.CheckedMatchCanTransfer(checkedMatch, filter, flip)))
                    return true;
            }
            return false;
        }
        checkSelfSpecific(BHash, filter, reverse) {
            if (![this.player, ...this._nearby].some(c => c.findSub(BHash)))
                return undefined;
            for (const s of [this.player, ...this.player.deepSubs()]) {
                if (s.cHash === BHash)
                    continue;
                const flip = this.flipHash(s.cHash, BHash) ? !reverse : !!reverse;
                if (this.interrelation(s.cHash, BHash)?.found.some(checkedMatch => this.CheckedMatchCanTransfer(checkedMatch, filter, flip)))
                    return true;
            }
            return false;
        }
        checkSpecific(fromHash, toHash, filter) {
            if (fromHash === toHash)
                return false;
            [fromHash, toHash].forEach(h => { if (![this.player, ...this._nearby].some(c => c.findSub(h)))
                return undefined; });
            const flip = this.flipHash(fromHash, toHash);
            return this.interrelation(fromHash, toHash)?.found.some(checkedMatch => this.CheckedMatchCanTransfer(checkedMatch, filter, flip));
        }
    }
    exports.LocalStorageCache = LocalStorageCache;
    ;
    class StorageCacheBase {
        constructor(e, hash, noRefresh) {
            this._outdated = true;
            if (StaticHelper_1.GLOBALCONFIG.log_info)
                StaticHelper_1.default.QS_LOG.info(`Constructing StorageCache for entity ${e} with hash '${hash}'`);
            this.entity = e;
            this.cHash = hash;
            this._main = new Set;
            this._subs = [];
        }
        get main() { this.refresh(); return this._main; }
        get subs() { this.refresh(); return this._subs; }
        get outdated() { return this._outdated; }
        setOutdated(recursive) { this._outdated = true; if (recursive)
            this._subs.forEach(s => s.setOutdated(true)); }
        deepSubs() { return [...this.subs, ...this.subs.flatMap(s => s.deepSubs())]; }
        findSub(sub) {
            if (typeof (sub) !== "string")
                sub = sub.island.items.hashContainer(sub);
            for (const s of this._subs) {
                const ss = (s.cHash === sub) ? s : s.findSub(sub);
                if (ss)
                    return ss;
            }
            return undefined;
        }
        refresh(protect) {
            if (!this._outdated)
                return this;
            if (StaticHelper_1.GLOBALCONFIG.log_info)
                StaticHelper_1.default.QS_LOG.info(`StorageCacheBase.refresh(): Updating outdated cache for entity ${this.entity} with hash '${this.cHash}'`);
            this._main = TransferHandler_1.default.setOfParams([{
                    containedItems: (protect ?? false)
                        ? this.cRef.containedItems.filter(i => !(i.isProtected() || i.isEquipped(true) || (StaticHelper_1.default.QS_INSTANCE.globalData.optionKeepContainers && (0, TransferHandler_1.isStorageType)(i.type))))
                        : this.cRef.containedItems
                }]);
            const subCacheHashes = this._subs.map(s => s.cHash);
            const subContainers = this.cRef.containedItems.filter(i => ItemManager_1.default.isContainer(i));
            const subConHashes = subContainers.map(s => s.island.items.hashContainer(s));
            subCacheHashes.map((h, idx) => subConHashes.includes(h) ? undefined : idx).filterNullish().reverse().forEach(idx => {
                if (StaticHelper_1.GLOBALCONFIG.log_info)
                    StaticHelper_1.default.QS_LOG.info(`... removing cache entry for missing subcontainer, hash '${this._subs[idx].cHash}'`);
                this._subs.splice(idx);
                subCacheHashes.splice(idx);
            });
            subConHashes.map((h, idx) => subCacheHashes.includes(h) ? undefined : idx).filterNullish().forEach(idx => {
                this._subs.push(new StorageCacheItem(subContainers[idx]));
                if (StaticHelper_1.GLOBALCONFIG.log_info)
                    StaticHelper_1.default.QS_LOG.info(`... adding new cache entry for subcontainer, hash '${this._subs.last()?.cHash}'`);
            });
            this._subs.forEach(s => s.setOutdated(true));
            this._outdated = false;
            return this;
        }
    }
    exports.StorageCacheBase = StorageCacheBase;
    class StorageCacheNearby extends StorageCacheBase {
        constructor(e, p, hash) {
            super(e, hash);
            this.nearWhom = p;
        }
        get relation() { return this._relation; }
        refreshRelation() {
            const ppos = this.nearWhom.getPoint();
            const thisPos = this.thisPos();
            const diff = { x: thisPos.x - ppos.x, y: thisPos.y - ppos.y, z: thisPos.z - ppos.z };
            const ok = isOnOrAdjacent(ppos, thisPos);
            if (StaticHelper_1.GLOBALCONFIG.log_info)
                StaticHelper_1.default.QS_LOG.info(`StorageCacheNearby: Updating relation of '${this.cHash}'. Identified positions\n` +
                    `Player: ${new Vector3_1.default(ppos).xyz}    Entity${new Vector3_1.default(thisPos).xyz}     OK?: ${ok}`);
            if (!ok)
                return false;
            this._relation = Direction_1.Direction.get(diff);
            return true;
        }
        refreshIfNear() {
            if (this.refreshRelation()) {
                this.refresh();
                return true;
            }
            return false;
        }
    }
    class StorageCacheItem extends StorageCacheBase {
        constructor(e) {
            super(e, e.island.items.hashContainer(e));
            this.iswhat = "Item";
            this.cRef = this.entity;
        }
    }
    exports.StorageCacheItem = StorageCacheItem;
    class StorageCachePlayer extends StorageCacheBase {
        constructor(e) {
            super(e, e.island.items.hashContainer(e.inventory), true);
            this.iswhat = "Player";
            this.cRef = this.entity.inventory;
        }
        refresh() { return super.refresh(true); }
    }
    exports.StorageCachePlayer = StorageCachePlayer;
    class StorageCacheTile extends StorageCacheNearby {
        constructor(e, p) {
            super(e, p, p.island.items.hashContainer(e));
            this.iswhat = "ITile";
            this.cRef = e;
        }
        thisPos() { return !this.nearWhom.island.isTileEmpty(this.entity) ? { x: NaN, y: NaN, z: NaN } : this.entity; }
    }
    exports.StorageCacheTile = StorageCacheTile;
    class StorageCacheDoodad extends StorageCacheNearby {
        constructor(e, p) {
            super(e, p, p.island.items.hashContainer(e));
            this.iswhat = "Doodad";
            this.cRef = e;
        }
        thisPos() { return this.entity; }
    }
    exports.StorageCacheDoodad = StorageCacheDoodad;
});
//# sourceMappingURL=data:application/json;base64,